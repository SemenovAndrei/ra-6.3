{"version":3,"sources":["components/Form/Form.jsx","components/ListOfMessages/ListOfMessages.jsx","components/Chat/Chat.jsx","App.js","reportWebVitals.js","index.js"],"names":["FormWrapper","styled","form","TextArea","textarea","Button","button","Form","props","onSubmit","event","preventDefault","cols","rows","placeholder","value","messageValue","onChange","target","ListWrapper","div","MyMessage","OtherMessage","ListOfMessages","messages","map","message","userId","userID","id","content","useEffect","length","document","getElementById","latestID","scrollIntoView","behavior","block","inline","ChatWrapper","Separator","Chat","useState","empty","setMessageValue","listOfMessages","setListOfMessages","a","fetch","method","body","JSON","stringify","status","response","json","prevMessage","timeout","setInterval","loadMessages","clearInterval","prev","trim","sendMessage","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1c7b866d.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\n\nconst FormWrapper = styled.form`\n  width: 100%;\n  position: relative;\n`\n\nconst TextArea = styled.textarea`\n  width: 100%;\n  padding: 10px;\n  font-size: 1.2rem;\n  resize: none;\n  border-style: none;\n  outline: none;\n`\n\nconst Button = styled.button`\n  position: absolute;\n  bottom: 10px;\n  right: 10px;\n  width: 60px;\n  padding: 10px;\n  border-style: none;\n  border-radius: 10px;\n  cursor: pointer;\n`\n\nfunction Form(props) {\n  const onChange = (event) => {\n    props.onChange(event.target.value)\n  }\n\n  const onSubmit = (event) => {\n    event.preventDefault()\n    props.onSubmit()\n  }\n\n  return (\n    <FormWrapper onSubmit={onSubmit}>\n      <TextArea\n        cols=\"5\"\n        rows=\"5\"\n        placeholder=\"Enter your message\"\n        value={props.messageValue}\n        onChange={onChange}\n      ></TextArea>\n      {props.messageValue && <Button>Send</Button>}\n    </FormWrapper>\n  )\n}\n\nForm.propTypes = {\n  messageValue: PropTypes.string.isRequired,\n}\n\nexport default Form\n","import React, { useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nconst ListWrapper = styled.div`\n  width: 100%;\n  height: 50vh;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n\n  overflow-y: scroll;\n  scrollbar-width: none;\n\n  ::-webkit-scrollbar {\n    width: 0;\n  }\n`\nconst MyMessage = styled.div`\n  position: relative;\n  align-self: flex-end;\n  width: 45%;\n  padding-top: 5px;\n  padding-bottom: 5px;\n\n  & div {\n    padding: 10px;\n    margin-top: 5px;\n    margin-bottom: 5px;\n    white-space: pre-line;\n    border-radius: 10px;\n    background-color: rgba(81, 255, 0, 0.555);\n  }\n`\nconst OtherMessage = styled(MyMessage)`\n  align-self: flex-start;\n\n  & div {\n    background-color: rgba(53, 211, 177, 0.281);\n  }\n`\n\nfunction ListOfMessages(props) {\n  const messages = props.messages.map((message) => {\n    if (message.userId === props.userID) {\n      return (\n        <MyMessage id={message.id} key={message.id}>\n          <div>{message.content}</div>\n        </MyMessage>\n      )\n    }\n    return (\n      <OtherMessage id={message.id} key={message.id}>\n        <div>{message.content}</div>\n      </OtherMessage>\n    )\n  })\n\n  useEffect(() => {\n    if (messages.length) {\n      const element = document.getElementById(`${props.latestID}`)\n      element.scrollIntoView({ behavior: 'smooth', block: 'end', inline: 'nearest' })\n    }\n  })\n\n  return <ListWrapper id=\"list\">{messages}</ListWrapper>\n}\n\nListOfMessages.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    })\n  ),\n}\n\nexport default ListOfMessages\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport Form from '../Form/Form'\nimport ListOfMessages from '../ListOfMessages/ListOfMessages'\n\nconst ChatWrapper = styled.div`\n  width: 700px;\n  border: 2px solid #892dd4;\n  border-radius: 10px;\n`\nconst Separator = styled.div`\n  border-top: 2px solid #892dd4;\n`\n\nconst userID = 'userID'\n\nexport default function Chat() {\n  const [messageValue, setMessageValue] = useState({\n    empty: '',\n  })\n\n  const [listOfMessages, setListOfMessages] = useState({\n    messages: [],\n    latestID: 0,\n  })\n\n  const handleMessage = (value) => {\n    setMessageValue((prev) => ({\n      ...prev,\n      message: value,\n    }))\n  }\n\n  const onSubmit = () => {\n    if (messageValue.message.trim()) {\n      sendMessage()\n    }\n    setMessageValue({\n      empty: '',\n    })\n  }\n\n  async function sendMessage() {\n    // const response = await fetch(process.env.REACT_APP_MESSAGE_URL, {\n    // const response = await fetch(process.env.REACT_APP_MESSAGE_URL_HEROKU, {\n    const response = await fetch('https://ra-6-3-server.herokuapp.com/messages', {\n      method: 'POST',\n      body: JSON.stringify({\n        content: messageValue.message,\n        // userId: process.env.REACT_APP_USER_ID,\n        userId: userID,\n      }),\n    })\n    if (response.status === 204) {\n      // loadMessages()\n    }\n  }\n\n  useEffect(() => {\n    async function loadMessages() {\n      const response = await fetch(\n        // `${process.env.REACT_APP_MESSAGE_URL}?from=${listOfMessages.latestID}`,\n        // `${process.env.REACT_APP_MESSAGE_URL_HEROKU}?from=${listOfMessages.latestID}`,\n        `https://ra-6-3-server.herokuapp.com/messages?from=${listOfMessages.latestID}`,\n        {\n          method: 'GET',\n        }\n      )\n      const json = await response.json()\n\n      if (json.length) {\n        const prevMessage = listOfMessages.messages\n        setListOfMessages(() => ({\n          messages: [...prevMessage, ...json],\n          latestID: json[json.length - 1].id,\n        }))\n      }\n    }\n\n    const timeout = setInterval(() => loadMessages(), 1000)\n    return () => {\n      clearInterval(timeout)\n    }\n  }, [listOfMessages])\n\n  return (\n    <ChatWrapper>\n      <ListOfMessages {...listOfMessages} userID={userID} />\n      <Separator>\n        <Form\n          messageValue={messageValue.message || messageValue.empty}\n          onChange={handleMessage}\n          onSubmit={onSubmit}\n        />\n      </Separator>\n    </ChatWrapper>\n  )\n}\n","import './App.css'\nimport Chat from './components/Chat/Chat'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chat />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}